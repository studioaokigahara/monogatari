import { useState, useEffect } from "react";
import { PromptManager } from "@/database/prompts";
import type { PromptSet } from "@/database/schema/prompt-set";
import { Card, CardContent, CardHeader } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import {
    Select,
    SelectTrigger,
    SelectValue,
    SelectContent,
    SelectItem
} from "@/components/ui/select";
import { Label } from "@/components/ui/label";
import { Switch } from "@/components/ui/switch";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger
} from "@/components/ui/accordion";
import { Trash2, Plus, Save, X, MessageSquare } from "lucide-react";

interface PromptEditorProps {
    promptSetId: string | null;
    onDone: () => void;
}

interface Message {
    role: "system" | "user" | "assistant";
    content: string;
    enabled: boolean;
    position: "before" | "after";
    depth: number;
}

interface PromptSetState {
    name: string;
    description: string;
    messages: Message[];
}

export function PromptEditor({ promptSetId, onDone }: PromptEditorProps) {
    const [set, setSet] = useState<PromptSetState | null>(null);
    const [isLoading, setIsLoading] = useState(false);

    useEffect(() => {
        if (promptSetId) {
            PromptManager.get(promptSetId).then(
                (data: PromptSet | undefined) => {
                    if (data) {
                        setSet({
                            name: data.name,
                            description: data.description || "",
                            messages: data.messages.map((msg) => ({
                                role: msg.role,
                                content: msg.content,
                                enabled: msg.enabled,
                                position: msg.position,
                                depth: msg.depth
                            }))
                        });
                    }
                }
            );
        } else {
            setSet({ name: "", description: "", messages: [] });
        }
    }, [promptSetId]);

    const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) =>
        setSet((s) => (s ? { ...s, name: e.target.value } : null));

    const handleDescChange = (e: React.ChangeEvent<HTMLTextAreaElement>) =>
        setSet((s) => (s ? { ...s, description: e.target.value } : null));

    const handleMsgChange = (idx: number, updates: Partial<Message>) => {
        setSet((s) => {
            if (!s) return null;
            const messages = [...s.messages];
            messages[idx] = { ...messages[idx], ...updates };
            return { ...s, messages };
        });
    };

    const handleAddMsg = () => {
        setSet((s) => {
            if (!s) return null;
            return {
                ...s,
                messages: [
                    ...s.messages,
                    {
                        role: "system" as const,
                        content: "",
                        enabled: true,
                        position: "before" as const,
                        depth: 0
                    }
                ]
            };
        });
    };

    const handleDeleteMsg = (idx: number) => {
        setSet((s) => {
            if (!s) return null;
            return {
                ...s,
                messages: s.messages.filter((_, i) => i !== idx)
            };
        });
    };

    const handleSave = async () => {
        if (!set) return;

        setIsLoading(true);
        try {
            const saveData = {
                id: promptSetId || "",
                name: set.name,
                description: set.description,
                createdAt: new Date(),
                updatedAt: new Date(),
                messages: set.messages.map((msg) => ({
                    ...msg,
                    id: "", // Will be generated by the database
                    name: "",
                    metadata: {}
                }))
            };
            await PromptManager.save(saveData);
            onDone();
        } catch (error) {
            console.error("Failed to save prompt set:", error);
        } finally {
            setIsLoading(false);
        }
    };

    const getRoleIcon = (role: string) => {
        switch (role) {
            case "system":
                return "ðŸ”§";
            case "user":
                return "ðŸ‘¤";
            case "assistant":
                return "ðŸ¤–";
            default:
                return "ðŸ’¬";
        }
    };

    const getRoleColor = (role: string) => {
        switch (role) {
            case "system":
                return "text-blue-600 dark:text-blue-400";
            case "user":
                return "text-green-600 dark:text-green-400";
            case "assistant":
                return "text-purple-600 dark:text-purple-400";
            default:
                return "text-gray-600 dark:text-gray-400";
        }
    };

    if (!set)
        return (
            <div className="flex items-center justify-center p-8">
                Loading...
            </div>
        );

    return (
        <Card className="w-full max-w-4xl">
            <CardHeader className="space-y-4">
                <div className="space-y-2">
                    <Label
                        htmlFor="prompt-name"
                        className="text-base font-semibold"
                    >
                        Prompt Set Name
                    </Label>
                    <Input
                        id="prompt-name"
                        value={set.name}
                        onChange={handleNameChange}
                        placeholder="Enter prompt set name..."
                        className="text-lg"
                    />
                </div>

                <div className="space-y-2">
                    <Label
                        htmlFor="prompt-description"
                        className="text-base font-semibold"
                    >
                        Description
                    </Label>
                    <Textarea
                        id="prompt-description"
                        value={set.description || ""}
                        onChange={handleDescChange}
                        placeholder="Describe what this prompt set is for..."
                        minRows={2}
                        maxRows={4}
                    />
                </div>

                <div className="flex flex-wrap gap-2">
                    <Button
                        onClick={handleAddMsg}
                        variant="outline"
                        className="flex items-center gap-2"
                    >
                        <Plus className="h-4 w-4" />
                        Add Message
                    </Button>
                    <Button
                        onClick={handleSave}
                        disabled={isLoading || !set.name.trim()}
                        className="flex items-center gap-2"
                    >
                        <Save className="h-4 w-4" />
                        {isLoading ? "Saving..." : "Save"}
                    </Button>
                    <Button
                        onClick={onDone}
                        variant="outline"
                        className="flex items-center gap-2"
                    >
                        <X className="h-4 w-4" />
                        Cancel
                    </Button>
                </div>
            </CardHeader>

            <CardContent className="space-y-4">
                <div className="flex items-center gap-2 text-lg font-semibold">
                    <MessageSquare className="h-5 w-5" />
                    Messages ({set.messages.length})
                </div>

                {set.messages.length === 0 ? (
                    <div className="text-center py-8 text-muted-foreground">
                        <MessageSquare className="h-12 w-12 mx-auto mb-4 opacity-50" />
                        <p className="text-lg">No messages yet</p>
                        <p className="text-sm">
                            Click "Add Message" to get started
                        </p>
                    </div>
                ) : (
                    <Accordion type="multiple" className="space-y-2">
                        {set.messages.map((msg, i) => (
                            <AccordionItem
                                key={i}
                                value={`message-${i}`}
                                className="border rounded-lg"
                            >
                                <AccordionTrigger className="px-4 hover:no-underline overflow-hidden">
                                    <div className="flex items-center gap-3 text-left overflow-hidden">
                                        <span className="text-lg">
                                            {getRoleIcon(msg.role)}
                                        </span>
                                        <div className="flex-1 min-w-0">
                                            <div className="flex items-center gap-2 mb-1">
                                                <span
                                                    className={`font-semibold capitalize ${getRoleColor(msg.role)}`}
                                                >
                                                    {msg.role}
                                                </span>
                                                <span className="text-xs bg-muted px-2 py-1 rounded">
                                                    {msg.position} â€¢ depth{" "}
                                                    {msg.depth}
                                                </span>
                                                {!msg.enabled && (
                                                    <span className="text-xs bg-destructive/20 text-destructive px-2 py-1 rounded">
                                                        Disabled
                                                    </span>
                                                )}
                                            </div>
                                            <p className="text-sm text-muted-foreground truncate">
                                                {msg.content || "No content"}
                                            </p>
                                        </div>
                                    </div>
                                </AccordionTrigger>
                                <AccordionContent>
                                    <div className="px-4 pb-4 space-y-4">
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                            <div className="space-y-2">
                                                <Label htmlFor={`role-${i}`}>
                                                    Role
                                                </Label>
                                                <Select
                                                    value={msg.role}
                                                    onValueChange={(
                                                        value:
                                                            | "system"
                                                            | "user"
                                                            | "assistant"
                                                    ) =>
                                                        handleMsgChange(i, {
                                                            role: value
                                                        })
                                                    }
                                                >
                                                    <SelectTrigger
                                                        id={`role-${i}`}
                                                    >
                                                        <SelectValue placeholder="Select role" />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                        <SelectItem value="system">
                                                            ðŸ”§ System
                                                        </SelectItem>
                                                        <SelectItem value="user">
                                                            ðŸ‘¤ User
                                                        </SelectItem>
                                                        <SelectItem value="assistant">
                                                            ðŸ¤– Assistant
                                                        </SelectItem>
                                                    </SelectContent>
                                                </Select>
                                            </div>

                                            <div className="space-y-2">
                                                <Label
                                                    htmlFor={`position-${i}`}
                                                >
                                                    Position
                                                </Label>
                                                <Select
                                                    value={msg.position}
                                                    onValueChange={(
                                                        value:
                                                            | "before"
                                                            | "after"
                                                    ) =>
                                                        handleMsgChange(i, {
                                                            position: value
                                                        })
                                                    }
                                                >
                                                    <SelectTrigger
                                                        id={`position-${i}`}
                                                    >
                                                        <SelectValue placeholder="Select position" />
                                                    </SelectTrigger>
                                                    <SelectContent>
                                                        <SelectItem value="before">
                                                            Before
                                                        </SelectItem>
                                                        <SelectItem value="after">
                                                            After
                                                        </SelectItem>
                                                    </SelectContent>
                                                </Select>
                                            </div>

                                            <div className="space-y-2">
                                                <Label htmlFor={`depth-${i}`}>
                                                    Depth
                                                </Label>
                                                <Input
                                                    id={`depth-${i}`}
                                                    type="number"
                                                    value={msg.depth}
                                                    onChange={(e) =>
                                                        handleMsgChange(i, {
                                                            depth: Number(
                                                                e.target.value
                                                            )
                                                        })
                                                    }
                                                    min="0"
                                                    className="w-full"
                                                />
                                            </div>

                                            <div className="flex items-center space-x-2">
                                                <Switch
                                                    id={`enabled-${i}`}
                                                    checked={msg.enabled}
                                                    onCheckedChange={(
                                                        checked
                                                    ) =>
                                                        handleMsgChange(i, {
                                                            enabled: checked
                                                        })
                                                    }
                                                />
                                                <Label
                                                    htmlFor={`enabled-${i}`}
                                                    className="cursor-pointer"
                                                >
                                                    Enabled
                                                </Label>
                                            </div>
                                        </div>

                                        <div className="space-y-2">
                                            <Label htmlFor={`content-${i}`}>
                                                Content
                                            </Label>
                                            <Textarea
                                                id={`content-${i}`}
                                                value={msg.content}
                                                onChange={(e) =>
                                                    handleMsgChange(i, {
                                                        content: e.target.value
                                                    })
                                                }
                                                placeholder="Enter message content..."
                                                minRows={3}
                                                maxRows={10}
                                            />
                                        </div>

                                        <div className="flex justify-end">
                                            <Button
                                                variant="destructive"
                                                size="sm"
                                                onClick={() =>
                                                    handleDeleteMsg(i)
                                                }
                                                className="flex items-center gap-2"
                                            >
                                                <Trash2 className="h-4 w-4" />
                                                Delete Message
                                            </Button>
                                        </div>
                                    </div>
                                </AccordionContent>
                            </AccordionItem>
                        ))}
                    </Accordion>
                )}
            </CardContent>
        </Card>
    );
}
